sdks:
  dns:
    readme: |
      import dns.openapi_client
      from dns.openapi_client.models.zones import Zones
      from dns.openapi_client.rest import ApiException
      from pprint import pprint

      with dns.create_sdk("YOUR-API-TOKEN") as api_client:
          api_instance = dns.openapi_client.ZoneApi(api_client)
          try:
              api_response: Zones = api_instance.get_list_zones()
              
              pprint(api_response)
          except ApiException as e:
              print(e)
    classes:
      ZoneApi:
        examples:
          create_zone: |
            import dns.openapi_client
            from dns.openapi_client.models.create_zone import CreateZone
            from dns.openapi_client.models.create_zone_request import CreateZoneRequest
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.ZoneApi(api_client)
                zone_struct: CreateZoneRequest = dns.openapi_client.CreateZoneRequest(name = "example.com")
                
                try:
                    api_response: CreateZone = api_instance.create_zone(zone_struct)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_zone: |
            import dns.openapi_client
            from dns.openapi_client.models.submitted import Submitted
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.ZoneApi(api_client)
                zone = 'example.com'
                
                try:
                    api_response: Submitted = api_instance.delete_zone(zone)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_list_zones: |
            import dns.openapi_client
            from dns.openapi_client.models.zones import Zones
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.ZoneApi(api_client)
                try:
                    api_response: Zones = api_instance.get_list_zones()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_zone: |
            import dns.openapi_client
            from dns.openapi_client.models.create_zone import CreateZone
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.ZoneApi(api_client)
                zone = 'example.com'
                
                try:
                    api_response: CreateZone = api_instance.get_zone(zone)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      CheckNameServersApi:
        examples:
          check_name_server: |
            import dns.openapi_client
            from dns.openapi_client.models.submitted import Submitted
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.CheckNameServersApi(api_client)
                zone = 'example.com'
                
                try:
                    api_response: Submitted = api_instance.check_name_server(zone)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      DnsRecordApi:
        examples:
          create_dns_record: |
            import dns.openapi_client
            from dns.openapi_client.models.dns_record_response import DnsRecordResponse
            from dns.openapi_client.models.dns_record import DnsRecord
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.DnsRecordApi(api_client)
                zone = 'example.com'
                dns_record: DnsRecord = dns.openapi_client.DnsRecord(
                    name = "test", type = "A", ttl = 3600, contents = [{
                        "ip": "1.2.3.4"
                    }]
                )
                
                try:
                    api_response: DnsRecordResponse = api_instance.create_dns_record(zone, dns_record)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_dns_record: |
            import dns.openapi_client
            from dns.openapi_client.rest import ApiException

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.DnsRecordApi(api_client)
                zone = 'example.com'
                id = 'example-id'
                
                try:
                    api_instance.delete_dns_record(zone, id)
                except ApiException as e:
                    print(e)
          edit_dns_record: |
            import dns.openapi_client
            from dns.openapi_client.models.dns_record_response import DnsRecordResponse
            from dns.openapi_client.models.dns_record import DnsRecord
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.DnsRecordApi(api_client)
                zone = 'example.com'
                id = 'example-id'
                dns_record: DnsRecord = dns.openapi_client.DnsRecord(
                    name = "tesst", type = "A", ttl = 7200, contents = [{
                        "ip": "4.3.2.1"
                    }]
                )
                
                try:
                    api_response: DnsRecordResponse = api_instance.edit_dns_record(zone, id, dns_record)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_dns_record: |
            import dns.openapi_client
            from dns.openapi_client.models.dns_record_response import DnsRecordResponse
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.DnsRecordApi(api_client)
                zone = 'example.com'
                id = 'example-id'
                
                try:
                    api_response: DnsRecordResponse = api_instance.get_dns_record(zone, id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_list_dns_records: |
            import dns.openapi_client
            from dns.openapi_client.models.all_dns_record_response import AllDnsRecordResponse
            from dns.openapi_client.rest import ApiException
            from pprint import pprint

            with dns.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dns.openapi_client.DnsRecordApi(api_client)
                zone = 'example.com'
                
                try:
                    api_response: AllDnsRecordResponse = api_instance.get_list_dns_records(zone)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
  mail:
    readme: |
      import mail.openapi_client
      from mail.openapi_client.models.mail_servers import MailServers
      from mail.openapi_client.rest import ApiException
      from pprint import pprint

      with mail.create_sdk("YOUR-API-TOKEN") as api_client:
          api_instance = mail.openapi_client.MailsApi(api_client)

          try:
              api_response: MailServers = api_instance.get_mails()
              
              pprint(api_response)
          except ApiException as e:
              print(e)
    classes:
      AccountsApi:
        examples:
          check_mail_available: |
            import mail.openapi_client
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.AccountsApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                account_name = 'account_name_example' 

                try:
                    api_response: PostMails201Response = api_instance.check_mail_available(mail_server_id, account_name)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          create_mail_a_ccount: |
            import mail.openapi_client
            from mail.openapi_client.models.model5 import Model5
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.AccountsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                body: Model5 = mail.openapi_client.Model5(name = 'name_example')

                try:
                    api_response: PostMails201Response = api_instance.create_mail_a_ccount(mail_server_id, body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_mail_account: |
            import mail.openapi_client
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.AccountsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                account_id = 'account_id_example'

                try:
                    api_instance.delete_mail_account(mail_server_id, account_id)
                except ApiException as e:
                    print(e)
          get_all_mail_accounts: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_accounts import MailAccounts
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.AccountsApi(api_client)
                mail_server_id = 'mail_server_id_example'

                try:
                    api_response: MailAccounts = api_instance.get_all_mail_accounts(mail_server_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      AttachmentsApi:
        examples:
          downloadAttachments: |
            import mail.openapi_client
            from mail.openapi_client.models.download_attachments200_response import DownloadAttachments200Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.AttachmentsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                message_id = 'message_id_example'
                attachment_id = 'attachment_id_example'

                try:
                    api_response: DownloadAttachments200Response = api_instance.download_attachments(mail_server_id, message_id, attachment_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_all_attachments: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_attachments import MailAttachments
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.AttachmentsApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                message_id = 'message_id_example'

                try:
                    api_response: MailAttachments = api_instance.get_all_attachments(mail_server_id, message_id)        
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      EventApi:
        examples:
          get_all_events: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_events import MailEvents
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.EventApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                message_id = 'message_id_example' 
                page = 1 
                count = 15 

                try:
                    api_response: MailEvents = api_instance.get_all_events(mail_server_id, message_id, page=page, count=count)        
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      ForwardApi:
        examples:
          create_address_forwarding: |
            import mail.openapi_client
            from mail.openapi_client.models.model6 import Model6
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.ForwardApi(api_client)
                mail_server_id = 'mail_server_id_example'
                account_id = 'account_id_example' 
                body: Model6 = mail.openapi_client.Model6(address = 'example_address')

                try:
                    api_response: PostMails201Response = api_instance.create_address_forwarding(mail_server_id, account_id, body=body)       
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_extra_endpoint: |
            import mail.openapi_client
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.ForwardApi(api_client)
                mail_server_id = 'mail_server_id_example'
                account_id = 'account_id_example'
                address_id = 'address_id_example'

                try:
                    api_instance.delete_extra_endpoint(mail_server_id, account_id, address_id)  
                except ApiException as e:
                    print(e)
          get_list_address_forwarding: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_forwards import MailForwards
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.ForwardApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                account_id = 'account_id_example'
                
                try:
                    api_response: MailForwards = api_instance.get_list_address_forwarding(mail_server_id, account_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      InboundrulesApi:
        examples:
          add_inbound_rule: |
            import mail.openapi_client
            from mail.openapi_client.models.model11 import Model11
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.InboundrulesApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                model11: Model11 = mail.openapi_client.Model11(rule = 'rule_example')
                
                try:
                    api_response: PostMails201Response = api_instance.add_inbound_rule(mail_server_id, model11=model11)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_inbound_rule: |
            import mail.openapi_client
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.InboundrulesApi(api_client)
                mail_server_id = 'mail_server_id_example'
                inboundrule_id = 'inboundrule_id_example'
                
                try:
                    api_instance.delete_inbound_rule(mail_server_id, inboundrule_id)
                except ApiException as e:
                    print(e)
          get_all_inbound_rules: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_inbound_rules import MailInboundRules
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.InboundrulesApi(api_client)
                mail_server_id = 'mail_server_id_example'
                
                try:
                    api_response: MailInboundRules = api_instance.get_all_inbound_rules(mail_server_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      MailsApi:
        examples:
          change_mail_server_plan: |
            import mail.openapi_client
            from mail.openapi_client.models.model10 import Model10
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                body: Model10 = mail.openapi_client.Model10(plan = 'plan_example')
                
                try:
                    api_response = api_instance.change_mail_server_plan(mail_server_id, body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          check_domain_available: |
            import mail.openapi_client
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                domain = 'domain_example'
                
                try:
                    api_response: PostMails201Response = api_instance.check_domain_available(domain)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          check_mail_server_dns_status: |
            import mail.openapi_client
            from mail.openapi_client.models.check_dns import CheckDNS
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                
                try:
                    api_response: CheckDNS = api_instance.check_mail_server_dns_status(mail_server_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_mail_server: |
            import mail.openapi_client
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                
                try:
                    api_instance.delete_mail_server(mail_server_id)
                except ApiException as e:
                    print(e)
          edit_mail_server: |
            import mail.openapi_client
            from mail.openapi_client.mode`ls.model8 import Model8
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                body: Model8 = mail.openapi_client.Model8(mode = 'dev', inboundSpamThreshold = 0)
                
                try:
                    api_response: PostMails201Response = api_instance.edit_mail_server(mail_server_id, body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)`
          get_count_free_mails: |
            import mail.openapi_client
            from mail.openapi_client.models.remaining_free_mails import RemainingFreeMails
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                
                try:
                    api_response: RemainingFreeMails = api_instance.get_count_free_mails(mail_server_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_count_mails: |
            import mail.openapi_client
            from mail.openapi_client.models.count_mail_per_day import CountMailPerDay
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                last_n_days = 30 
                
                try:
                    api_response: CountMailPerDay = api_instance.get_count_mails(mail_server_id, last_n_days=last_n_days)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_mails: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_servers import MailServers
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)

                try:
                    api_response: MailServers = api_instance.get_mails()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_single_mail_server: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_server import MailServer
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                mail_server_id = 'mail_server_id_example'
                
                try:
                    api_response: MailServer = api_instance.get_single_mail_server(mail_server_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          post_mails: |
            import mail.openapi_client
            from mail.openapi_client.models.model1 import Model1
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MailsApi(api_client)
                body: Model1 = mail.openapi_client.Model1(plan = 'plan_example', domain = 'domain_example', mode = 'DEV')
                
                try:
                    api_response: PostMails201Response = api_instance.post_mails(body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      MessagesApi:
        examples:
          generate_temporary: |
            import mail.openapi_client
            from mail.openapi_client.models.tmp_access import TmpAccess
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MessagesApi(api_client)
                mail_server_id = 'mail_server_id_example'
                message_id = 'message_id_example'
                expiration = 1

                try:
                    api_response: TmpAccess = api_instance.generate_temporary(mail_server_id, message_id, expiration=expiration)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_all_mails: |
            import mail.openapi_client
            from mail.openapi_client.models.mail_messages import MailMessages
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MessagesApi(api_client)
                mail_server_id = 'mail_server_id_example'
                direction = 'direction_example'
                page = 1
                count = 15
                state = 'state_example'
                subject = 'subject_example'
                var_from = 'var_from_example'
                to = 'to_example'

                try:
                    api_response: MailMessages = api_instance.get_all_mails(mail_server_id, direction, page=page, count=count, state=state, subject=subject, var_from=var_from, to=to)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_single_mail: |
            import mail.openapi_client
            from mail.openapi_client.models.get_single_mail200_response import GetSingleMail200Response
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MessagesApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                message_id = 'message_id_example'

                try:
                    api_response: GetSingleMail200Response = api_instance.get_single_mail(mail_server_id, message_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_single_mail_html: |
            import mail.openapi_client
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MessagesApi(api_client)
                mail_server_id = 'mail_server_id_example'
                message_id = 'message_id_example'
                token = 'token_example'

                try:
                    api_instance.get_single_mail_html(mail_server_id, message_id, token)
                except ApiException as e:
                    print(e)
          send_mail: |
            import mail.openapi_client
            from mail.openapi_client.models.post_mails201_response import PostMails201Response
            from mail.openapi_client.models.model3 import Model3
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.MessagesApi(api_client)
                mail_server_id = 'mail_server_id_example'
                body: Model3 = mail.openapi_client.Model3(
                    html = 'html_example',
                    text = 'text_example',
                    subject = 'subject_example',
                    to = 'to_example',
                    var_from = 'var_from_example',
                    reply_to = 'reply_to_example',
                    attachments = {
                        "name" : "name_example",
                        "content_type": "content_type_example",
                        "data": "data_example"
                    }
                )

                try:
                    api_response: PostMails201Response = api_instance.send_mail(mail_server_id, body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      SmtpApi:
        examples:
          delete_smtp_credential: |
            import mail.openapi_client
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.SmtpApi(api_client)
                mail_server_id = 'mail_server_id_example'
                username = 'username_example'

                try:
                    api_instance.delete_smtp_credential(mail_server_id, username)
                except ApiException as e:
                    print(e)
          generate_credentials: |
            import mail.openapi_client
            from mail.openapi_client.models.create_smtp import CreateSMTP
            from mail.openapi_client.models.model4 import Model4
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.SmtpApi(api_client)
                mail_server_id = 'mail_server_id_example'
                body: Model4 = mail.openapi_client.Model4(description = "description_example")

                try:
                    api_response: CreateSMTP = api_instance.generate_credentials(mail_server_id, body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_credential: |
            import mail.openapi_client
            from mail.openapi_client.models.smtp import SMTP
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.SmtpApi(api_client)
                mail_server_id = 'mail_server_id_example'

                try:
                    api_response: SMTP = api_instance.get_credential(mail_server_id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          revoke_credentials: |
            import mail.openapi_client
            from mail.openapi_client.models.create_smtp import CreateSMTP
            from mail.openapi_client.models.model9 import Model9
            from mail.openapi_client.rest import ApiException
            from pprint import pprint

            with mail.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = mail.openapi_client.SmtpApi(api_client)
                mail_server_id = 'mail_server_id_example' 
                body: Model9 = mail.openapi_client.Model9(username = 'username_example')

                try:
                    api_response: CreateSMTP = api_instance.revoke_credentials(mail_server_id, body=body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
  paas:
    readme: |
      import paas.openapi_client
      from paas.openapi_client.models.projects import Projects
      from paas.openapi_client.rest import ApiException
      from pprint import pprint

      with paas.create_sdk("YOUR-API-TOKEN") as api_client:
          api_instance = paas.openapi_client.AppsApi(api_client)
          try:
              api_response: Projects = api_instance.get_apps()
              
              pprint(api_response)
          except ApiException as e:
              print(e)
    classes:
      AppsApi:
        examples:
          change_plan: |
            import paas.openapi_client
            from paas.openapi_client.models.change_plan_request import ChangePlanRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                plan: ChangePlanRequest = paas.openapi_client.ChangePlanRequest(plan_id = 'plan_id_example')

                try:
                    api_instance.change_plan(name, plan)
                except ApiException as e:
                    print(e)
          create_app: |
            import paas.openapi_client
            from paas.openapi_client.models.create_app import CreateApp
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                create_app: CreateApp = paas.openapi_client.CreateApp(name = 'name_example', plan_id= 'plan_id_example', platform = 'platform_example')

                try:
                    api_instance.create_app(create_app)
                except ApiException as e:
                    print(e)
          delete_app_by_name: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example' 
                
                try:
                    api_instance.delete_app_by_name(name)
                except ApiException as e:
                    print(e)
          get_app_applets: |
            import paas.openapi_client
            from paas.openapi_client.models.applets import Applets
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                
                try:
                    api_response: Applets = api_instance.get_app_applets(name)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_by_name: |
            import paas.openapi_client
            from paas.openapi_client.models.project_all_details import ProjectAllDetails
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                
                try:
                    api_response: ProjectAllDetails = api_instance.get_app_by_name(name)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_logs: |
            import paas.openapi_client
            from paas.openapi_client.models.logs_inner import LogsInner
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                since = 'since_example'
                
                try:
                    api_response: LogsInner = api_instance.get_app_logs(name, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_releases: |
            import paas.openapi_client
            from paas.openapi_client.models.releases import Releases
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                page = 1.0
                count = 10.0 
                
                try:
                    api_response: Releases = api_instance.get_app_releases(name, page, count)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_apps: |
            import paas.openapi_client
            from paas.openapi_client.models.projects import Projects
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                try:
                    api_response: Projects = api_instance.get_apps()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          restart_app: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                
                try:
                    api_instance.restart_app(name)
                except ApiException as e:
                    print(e)
          turn_app: |
            import paas.openapi_client
            from paas.openapi_client.models.turn_app_request import TurnAppRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.AppsApi(api_client)
                name = 'name_example'
                scale: TurnAppRequest = paas.openapi_client.TurnAppRequest()
                
                try:
                    api_instance.turn_app(name, scale)
                except ApiException as e:
                    print(e)
      DeployApi:
        examples:
          releasesDeploy: |
            import paas.openapi_client
            from paas.openapi_client.models.deploy_releases import DeployReleases
            from paas.openapi_client.models.releases_deploy200_response import ReleasesDeploy200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DeployApi(api_client)
                name = 'example_name'
                deploy_releases: DeployReleases = paas.openapi_client.DeployReleases()
                deploy_releases.source_id = 'example_source_id'
                deploy_releases.type = 'example_type'
                deploy_releases.port = 3000

                try:
                    api_response: ReleasesDeploy200Response = api_instance.releases_deploy(name, deploy_releases)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          sources_deploy: |
            import paas.openapi_client
            from paas.openapi_client.models.sources_deploy200_response import SourcesDeploy200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DeployApi(api_client)
                name = 'example'
                file = './example.tar.gz'

                try:
                    api_response: SourcesDeploy200Response = api_instance.sources_deploy(name, file)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      DisksApi:
        examples:
          create_backup: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                id = 'id_example'
                name = 'name_example'

                try:
                    api_instance.create_backup(id, name)
                except ApiException as e:
                    print(e)
          create_disk: |
            import paas.openapi_client
            from paas.openapi_client.models.create_disk_request import CreateDiskRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                name = 'name_example'
                disk: CreateDiskRequest = paas.openapi_client.CreateDiskRequest()
                disk.name = 'name_example' 
                disk.size = 'size_example' 

                try:
                    api_instance.create_disk(name, disk)
                except ApiException as e:
                    print(e)
          create_ftp: |
            import paas.openapi_client
            from paas.openapi_client.models.create_ftp200_response import CreateFtp200Response
            from paas.openapi_client.models.create_ftp_request import CreateFtpRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                name = 'name_example' 
                dname = 'dname_example'
                create_ftp: CreateFtpRequest = paas.openapi_client.CreateFtpRequest()
                create_ftp.username = 'username_example'
                create_ftp.read_only = True

                try:
                    api_response: CreateFtp200Response = api_instance.create_ftp(name, dname, create_ftp)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_disk: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                id = 'id_example'
                name = 'name_example' 

                try:
                    api_instance.delete_disk(id, name)
                except ApiException as e:
                    print(e)
          delete_ftp: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                fname = 'fname_example'

                try:
                    api_instance.delete_ftp(fname)
                except ApiException as e:
                    print(e)
          download_backup: |
            import paas.openapi_client
            from paas.openapi_client.models.download_backup200_response import DownloadBackup200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                id = 'id_example'
                dname = 'dname_example'
                bname = 'bname_example'

                try:
                    api_response: DownloadBackup200Response = api_instance.download_backup(id, dname, bname)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_backups: |
            import paas.openapi_client
            from paas.openapi_client.models.get_disk_backup import GetDiskBackup
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                id = 'id_example'
                name = 'name_example'

                try:
                    api_response: GetDiskBackup = api_instance.get_backups(id, name)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_disks: |
            import paas.openapi_client
            from paas.openapi_client.models.get_disks import GetDisks
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                id = 'id_example'

                try:
                    api_response: GetDisks = api_instance.get_disks(id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_ftps: |
            import paas.openapi_client
            from paas.openapi_client.models.get_ftps200_response import GetFtps200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                name = 'name_example'
                dname = 'dname_example'

                try:
                    api_response: GetFtps200Response = api_instance.get_ftps(name, dname)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          resize_disk: |
            import paas.openapi_client
            from paas.openapi_client.models.resize_disk_request import ResizeDiskRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DisksApi(api_client)
                name = 'name_example'
                dname = 'dname_example'
                resize_disk: ResizeDiskRequest = paas.openapi_client.ResizeDiskRequest()
                resize_disk.size = 'size_example'
                
                try:
                    api_instance.resize_disk(name, dname, resize_disk)
                except ApiException as e:
                    print(e)
      DomainsApi:
        examples:
          check_domain: |
            import paas.openapi_client
            from paas.openapi_client.models.check_domain import CheckDomain
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                id = 'id_example'
                
                try:
                    api_response:CheckDomain = api_instance.check_domain(id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          create_app_domain	: |
            import paas.openapi_client
            from paas.openapi_client.models.create_app_domain201_response import CreateAppDomain201Response
            from paas.openapi_client.models.create_app_domain_request import CreateAppDomainRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                domain: CreateAppDomainRequest = paas.openapi_client.CreateAppDomainRequest()
                domain.name = 'name_example'
                domain.project = 'project_example'
                domain.type = 'type_example'
                
                try:
                    api_response:CreateAppDomain201Response = api_instance.create_app_domain(domain)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_domain: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                id = 'id_example'
                
                try:
                    api_instance.delete_domain(id)
                except ApiException as e:
                    print(e)
          disable_ssl: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                id = 'id_example'
                
                try:
                    api_instance.disable_ssl(id)
                except ApiException as e:
                    print(e)
          enable_ssl: |
            import paas.openapi_client
            from paas.openapi_client.models.enable_ssl200_response import EnableSsl200Response
            from paas.openapi_client.models.enable_ssl_request import EnableSslRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                domain: EnableSslRequest = paas.openapi_client.EnableSslRequest()
                domain.domain = "example.com"
                
                try:
                    api_response: EnableSsl200Response = api_instance.enable_ssl(domain)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_domains: |
            import paas.openapi_client
            from paas.openapi_client.models.domains import Domains
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                project = 'project_example'
                
                try:
                    api_response: Domains = api_instance.get_app_domains(project)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          redirect_domain: |
            import paas.openapi_client
            from paas.openapi_client.models.redirect_domain_request import RedirectDomainRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                id = 'id_example'
                domain: RedirectDomainRequest = paas.openapi_client.RedirectDomainRequest()
                domain.redirect_status = 302 # 301 or 302
                domain.redirect_to = 'example.com'
                
                try:
                    api_instance.redirect_domain(id, domain)
                except ApiException as e:
                    print(e)
          set_app_domain: |
            import paas.openapi_client
            from paas.openapi_client.models.set_app_domain_request import SetAppDomainRequest
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.DomainsApi(api_client)
                domain: SetAppDomainRequest = paas.openapi_client.SetAppDomainRequest()
                domain.domain_id = 'example_domain_id'
                domain.project_id = 'example_project_id'
                
                try:
                    api_instance.set_app_domain(domain)
                except ApiException as e:
                    print(e)
      ReportsApi:
        examples:
          get_app_cpu_reports: |
            import paas.openapi_client
            from paas.openapi_client.models.reports import Reports
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.ReportsApi(api_client)
                name = 'name_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_app_cpu_reports(name, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_memory_reports: |
            import paas.openapi_client
            from paas.openapi_client.models.reports import Reports
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.ReportsApi(api_client)
                name = 'name_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_app_memory_reports(name, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_network_receive_reports: |
            import paas.openapi_client
            from paas.openapi_client.models.reports import Reports
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.ReportsApi(api_client)
                name = 'name_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_app_network_receive_reports(name, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_app_summary_reports: |
            import paas.openapi_client
            from paas.openapi_client.models.get_app_summary_reports200_response import GetAppSummaryReports200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.ReportsApi(api_client)
                name = 'name_example'
                
                try:
                    api_response: GetAppSummaryReports200Response = api_instance.get_app_summary_reports(name)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_network_transmit_reports: |
            import paas.openapi_client
            from paas.openapi_client.models.reports import Reports
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.ReportsApi(api_client)
                name = 'name_example' 
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_network_transmit_reports(name, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      SettingsApi:
        examples:
          default_subdomain: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.SettingsApi(api_client)
                id = 'id_example'
                status = 'status_example'
                
                try:
                    api_instance.default_subdomain(id, status)
                except ApiException as e:
                    print(e)
          ip_static: |
            import paas.openapi_client
            from paas.openapi_client.models.ip_static200_response import IpStatic200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.SettingsApi(api_client)
                id = 'id_example'
                status = 'status_example'
                
                try:
                    api_response: IpStatic200Response = api_instance.ip_static(id, status)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          update_envs: |
            import paas.openapi_client
            from paas.openapi_client.models.update_envs import UpdateEnvs
            from paas.openapi_client.models.update_envs200_response import UpdateEnvs200Response
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.SettingsApi(api_client)
                update_envs: UpdateEnvs = paas.openapi_client.UpdateEnvs()
                update_envs.project = 'project_example'
                update_envs.variables = [
                    {
                        "key": "key_example",
                        "value": "value_example"
                    }
                ]
                
                try:
                    api_response: UpdateEnvs200Response = api_instance.update_envs(update_envs)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          zero_downtime: |
            import paas.openapi_client
            from paas.openapi_client.rest import ApiException
            from pprint import pprint

            with paas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = paas.openapi_client.SettingsApi(api_client)
                id = 'id_example'
                status = 'status_example'
                
                try:
                    api_instance.zero_downtime(id, status)
                except ApiException as e:
                    print(e)
  dbaas:
    readme: |
        import dbaas.openapi_client
        from dbaas.openapi_client.rest import ApiException
        from dbaas.openapi_client.models.dbs_details import DBsDetails
        from pprint import pprint

        with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
            api_instance = dbaas.openapi_client.DatabasesApi(api_client)
            
            try:
                api_response: DBsDetails = api_instance.get_list_databases()
                
                pprint(api_response)
            except ApiException as e:
                print(e)
    classes:
      BackupsApi:
        examples:
          create_backup: |
            import dbaas.openapi_client
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.BackupsApi(api_client)
                id = 'id_example' 
                
                try:
                    api_instance.create_backup(id)
                except ApiException as e:
                    print(e)
          download_backup: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.download_backup200_response import DownloadBackup200Response
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.BackupsApi(api_client)
                id = 'id_example'
                name = 'name_example'
                
                try:
                    api_response: DownloadBackup200Response = api_instance.download_backup(id, name)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_list_backups: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.get_list_backups200_response import GetListBackups200Response
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.BackupsApi(api_client)
                id = 'id_example'
                
                try:
                    api_response: GetListBackups200Response = api_instance.get_list_backups(id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      DatabasesApi:
        examples:
          change_control_panel: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.change_control_panel200_response import ChangeControlPanel200Response
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                id = 'id_example'
                status = 'status_example'
                
                try:
                    api_response: ChangeControlPanel200Response = api_instance.change_control_panel(id, status)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          change_public_network: |
            import dbaas.openapi_client
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                id = 'id_example'
                status = 'status_example'
                
                try:
                    api_instance.change_public_network(id, status)
                except ApiException as e:
                    print(e)
          create_database: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.create_database200_response import CreateDatabase200Response
            from dbaas.openapi_client.models.create_databases import CreateDatabases
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                create_a_databases: CreateDatabases = dbaas.openapi_client.CreateDatabases(
                    hostname = 'hostname_example',
                    options = {
                        "standaloneReplicaSet": True,
                    },
                    publicNetwork = True,
                    type = 'type_example',
                    planID = 'planID_example',
                    version = 'version_example'
                )
                
                try:
                    api_response: CreateDatabase200Response = api_instance.create_database(create_a_databases)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_database: |
            import dbaas.openapi_client
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                id = 'id_example'
                
                try:
                    api_instance.delete_database(id)
                except ApiException as e:
                    print(e)
          get_database: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.db_details import DBDetails
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                id = 'id_example'
                
                try:
                    api_response: DBDetails = api_instance.get_database(id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_list_databases: |
            import dbaas.openapi_client
            from dbaas.openapi_client.rest import ApiException
            from dbaas.openapi_client.models.dbs_details import DBsDetails
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                
                try:
                    api_response: DBsDetails = api_instance.get_list_databases()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          resize_database: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.resize_database_request import ResizeDatabaseRequest
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                id = 'id_example' 
                resize: ResizeDatabaseRequest = dbaas.openapi_client.ResizeDatabaseRequest(
                    disk = True,
                    planID = "planID_example",
                )
                
                try:
                    api_instance.resize_database(id, resize)
                except ApiException as e:
                    print(e)
          turn_database: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.turn_database_request import TurnDatabaseRequest
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.DatabasesApi(api_client)
                id = 'id_example'
                scale: TurnDatabaseRequest = dbaas.openapi_client.TurnDatabaseRequest(
                    scale = 1
                )
                
                try:
                    api_instance.turn_database(id, scale)
                except ApiException as e:
                    print(e)
      ReportsApi:
        examples:
          get_database_cpu_reports: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.reports import Reports
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.ReportsApi(api_client)
                id = 'id_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_database_cpu_reports(id, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_database_memory_reports: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.reports import Reports
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.ReportsApi(api_client)
                id = 'id_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_database_memory_reports(id, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_database_network_receive_reports: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.reports import Reports
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.ReportsApi(api_client)
                id = 'id_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_database_network_receive_reports(id, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_database_network_transmit_reports: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.reports import Reports
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.ReportsApi(api_client)
                id = 'id_example'
                since = 3.4 
                
                try:
                    api_response: Reports = api_instance.get_database_network_transmit_reports(id, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_database_summary_reports: |
            import dbaas.openapi_client
            from dbaas.openapi_client.models.get_database_summary_reports200_response import GetDatabaseSummaryReports200Response
            from dbaas.openapi_client.rest import ApiException
            from pprint import pprint

            with dbaas.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = dbaas.openapi_client.ReportsApi(api_client)
                id = 'id_example'
                
                try:
                    api_response: GetDatabaseSummaryReports200Response = api_instance.get_database_summary_reports(id)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
  object-storage:
    readme: |
        import object_storage.openapi_client
        from object_storage.openapi_client.models.list_bucket import ListBucket
        from object_storage.openapi_client.rest import ApiException
        from pprint import pprint

        with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
            api_instance = object_storage.openapi_client.BucketApi(api_client)
            
            try:
                api_response: ListBucket = api_instance.get_buckets()
                
                pprint(api_response)
            except ApiException as e:
                print(e)
    classes:
      BucketApi:
        examples:
          change_bucket_access: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.change_bucket_access200_response import ChangeBucketAccess200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)    
                bucket = 'bucket_example'
                permission = 'permission_example'
                
                try:
                    api_response: ChangeBucketAccess200Response = api_instance.change_bucket_access(bucket, permission)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          check_bucket: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.create_bucket201_response import CreateBucket201Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)    
                bucket = 'bucket_example'
                
                try:
                    api_response: CreateBucket201Response = api_instance.check_bucket(bucket)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          create_bucket: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.create_bucket import CreateBucket
            from object_storage.openapi_client.models.create_bucket201_response import CreateBucket201Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client) 
                body: CreateBucket = object_storage.openapi_client.CreateBucket(
                    name = 'name_example',
                    plan = 'plan_example',
                    permission = 'permission_example',
                )
                
                try:
                    api_response: CreateBucket201Response = api_instance.create_bucket(body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          destroy_bucket: |
            import object_storage.openapi_client
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                bucket = 'bucket_example'
                
                try:
                    api_instance.destroy_bucket(bucket)
                except ApiException as e:
                    print(e)
          get_buckets: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.list_bucket import ListBucket
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                
                try:
                    api_response: ListBucket = api_instance.get_buckets()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_list_previous_buckets: |
            import object_storage.openapi_client
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                
                try:
                    api_instance.get_list_previous_buckets()
                except ApiException as e:
                    print(e)
          get_migrations: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.get_migrations200_response import GetMigrations200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                
                try:
                    api_response: GetMigrations200Response = api_instance.get_migrations()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_single_buckets: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.get_single_buckets200_response import GetSingleBuckets200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                bucket = 'bucket_example'
                
                try:
                    api_response: GetSingleBuckets200Response = api_instance.get_single_buckets(bucket)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          migrating_buckets: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.migrate_bucket import MigrateBucket
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                body: MigrateBucket = object_storage.openapi_client.MigrateBucket(
                    var_from = 'var_from_example',
                    to = 'to_example',
                    path = 'path_example'
                )
                
                try:
                    api_instance.migrating_buckets(body)
                except ApiException as e:
                    print(e)
          upgrade_bucket: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.upgrade_bucket200_response import UpgradeBucket200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.BucketApi(api_client)
                bucket = 'bucket_example'
                plan = 'plan_example'
                
                try:
                    api_response: UpgradeBucket200Response = api_instance.upgrade_bucket(bucket, plan)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      FolderApi:
        examples:
          create_folder: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.create_folder import CreateFolder
            from object_storage.openapi_client.models.create_folder201_response import CreateFolder201Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                bucket = 'bucket_example' 
                body: CreateFolder = object_storage.openapi_client.CreateFolder(
                    path = 'path_example'
                )
                
                try:
                    api_response: CreateFolder201Response = api_instance.create_folder(bucket, body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_folder: |
            import object_storage.openapi_client
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                bucket = 'bucket_example' 
                path = 'path_example'
                
                try:
                    api_instance.delete_folder(bucket, path)
                except ApiException as e:
                    print(e)
      KeyApi:
        examples:
          create_key: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.create_key import CreateKey
            from object_storage.openapi_client.models.create_key201_response import CreateKey201Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                body: CreateKey = object_storage.openapi_client.CreateKey(
                    buckets = 'buckets_example',
                    description = 'description_example'
                )
                
                try:
                    api_response: CreateKey201Response = api_instance.create_key(body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          delete_key: |
            import object_storage.openapi_client
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                key = 'key_example'
                
                try:
                    api_instance.delete_key(key)
                except ApiException as e:
                    print(e)
          get_key: |
            import object_storage.openapi_client
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                key = 'key_example'
                
                try:
                    api_instance.get_key(key)
                except ApiException as e:
                    print(e)
          get_list_keys: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.keys import Keys
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                
                try:
                    api_response: Keys = api_instance.get_list_keys()
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          revoke_secret_key: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.revoke_secret_key200_response import RevokeSecretKey200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                key = 'key_example' 
                
                try:
                    api_response: RevokeSecretKey200Response = api_instance.revoke_secret_key(key)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          update_key: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.create_bucket201_response import CreateBucket201Response
            from object_storage.openapi_client.models.create_key import CreateKey
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.FolderApi(api_client)
                key = 'key_example' 
                body: CreateKey = object_storage.openapi_client.CreateKey(
                    buckets = [
                        {}
                    ],
                    description = 'description_example'
                )
                
                try:
                    api_response: CreateBucket201Response = api_instance.update_key(key, body)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      MetricsApi:
        examples:
          get_hisotrical_metrics: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.get_hisotrical_metrics200_response import GetHisotricalMetrics200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.MetricsApi(api_client)
                bucket = 'bucket_example'
                since = 'since_example'
                
                try:
                    api_response: GetHisotricalMetrics200Response = api_instance.get_hisotrical_metrics(bucket, since)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_metrics_summary: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.get_metrics_summary200_response import GetMetricsSummary200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.MetricsApi(api_client)
                bucket = 'bucket_example'
                
                try:
                    api_response: GetMetricsSummary200Response = api_instance.get_metrics_summary(bucket)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
      ObjectApi:
        examples:
          delete_object: |
            import object_storage.openapi_client
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.ObjectApi(api_client)
                bucket = 'bucket_example' # str | 
                prefix = 'prefix_example'
                
                try:
                    api_instance.delete_object(bucket, prefix)
                except ApiException as e:
                    print(e)
          download_object: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.download_object200_response import DownloadObject200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.ObjectApi(api_client)
                bucket = 'bucket_example' 
                object = 'object_example' 
                expiry = 'expiry_example'
                
                try:
                    api_response: DownloadObject200Response = api_instance.download_object(bucket, object, expiry=expiry)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_list_objects: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.objects import Objects
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.ObjectApi(api_client)
                bucket = 'bucket_example'  
                prefix = 'prefix_example'  
                number = 'number_example' 
                page = 'page_example'
                
                try:
                    api_response: Objects = api_instance.get_list_objects(bucket, prefix, number=number, page=page)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          get_stat_object: |
            import object_storage.openapi_client
            from object_storage.openapi_client.models.stat import Stat
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.ObjectApi(api_client)
                bucket = 'bucket_example'
                object = 'object_example'
                
                try:
                    api_response: Stat = api_instance.get_stat_object(bucket, object)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)
          upload_object: | 
            import object_storage.openapi_client
            from object_storage.openapi_client.models.download_object200_response import DownloadObject200Response
            from object_storage.openapi_client.rest import ApiException
            from pprint import pprint

            with object_storage.create_sdk("YOUR-API-TOKEN") as api_client:
                api_instance = object_storage.openapi_client.ObjectApi(api_client)
                bucket = 'bucket_example'
                object = 'object_example'
                
                try:
                    api_response: DownloadObject200Response = api_instance.upload_object(bucket, object)
                    
                    pprint(api_response)
                except ApiException as e:
                    print(e)